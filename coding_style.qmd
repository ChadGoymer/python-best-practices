---
title: "Coding Style"
---

## Style Guide

The official Python style guide is known as [PEP 8](https://peps.python.org/pep-0008/).
In Lloyd's, code should follow the PEP 8 style, as described. For a more accessible
overview, read the article
[How to Write Beautiful Python Code With PEP 8](https://realpython.com/python-pep8/).

To simplify the process of adhering to the PEP 8 conventions, we recomend using
[Ruff](https://docs.astral.sh/ruff/) to style your code. Ruff checks your code and gives
guidance on how to fix any issues (also known as linting). It can be run from the
command line or as a
[Visual Studio Code extension](https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff).
The extension can also be used to format your code and it is recommended to set the
option to format on save, to keep your code tidy. This can be achieved by adding the
following options to your `settings.json` file:

```json
"[python]": {
    "editor.defaultFormatter": "charliermarsh.ruff",
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
        "source.fixAll": "explicit",
        "source.organizeImports": "explicit"
    }
}
```

## Naming Conventions

To ensure that code is written consistenty across projects, use the following naming
conventions.

| Type     | Naming Convention | Examples |
|:-------- |:----------------- |:-------- |
| Variable | Use a lowercase single letter, word, or words. Separate words with underscores to improve readability. | `x`, `var`, `python_variable` |
| Function | Use a lowercase word or words. Separate words by underscores to improve readability. | `function`, `python_function` |
| Class    | Start each word with a capital letter. Don’t separate words with underscores. This style is called camel case or Pascal case. | `Model`, `PythonClass` |
| Method   | Use a lowercase word or words. Separate words with underscores to improve readability. | `class_method`, `method` |
| Constant | Use an uppercase single letter, word, or words. Separate words with underscores to improve readability. | `CONSTANT`, `PYTHON_CONSTANT`, `PYTHON_LONG_CONSTANT` |
| Module   | Use a short, lowercase word or words. Separate words with underscores to improve readability. | `module.py`, `python_module.py` |
| Package  | Use a short, lowercase word or words. Don’t separate words with underscores. | `package`, `pythonpackage` |

## Code Layout

### Blank Lines

- Surround top-level functions and classes with two blank lines.
- Surround method definitions inside classes with a single blank line.
- Use blank lines sparingly inside functions to show clear steps.

### Indentation

- Use four spaces to indent code.
- For long lines, we recommend using a hanging indent and put closing brackets on a new
line, for example:

```python
def function(
    arg_one,
    arg_two,
    arg_three,
    arg_four
):
    list_of_numbers = [
        arg_one,
        arg_two,
        arg_three,
        arg_four
    ]

    return list_of_numbers
```

### Comments

- Comments should be used sparingly. Using good names and clear layout should be enough in
most cases.
- For complicated code, split it into functions, classes and methods and use
[docstrings](documentation.qmd) to document them instead.

### Whitespace

- Surround binary operators with a space.
- Add a space after a comma
- Do not use spaces around `=` when assigning function and method arguments
- Do not leave spaces at the end of the line. Visual Studio Code has an option to remove
trailing whitespace on save:

```json
"files.trimTrailingWhitespace": true,
```
