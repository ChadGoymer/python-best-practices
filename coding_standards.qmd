---
title: "Coding Standards"
---

When writing code in any language it is important to follow coding standards. They make it
easier to read and understand the code. New starters will be able to learn how projects
work faster, which reduces key-person dependencies. Python has some standard approaches to
building projects, which then give you access to useful tools to aid in development, so
they should be used wherever possible. Python has a very large number of packages, and
sometimes more than one for the same job. Having a set of recommended packages ensures
consistency across projects. When common patterns are identified across projects, they
should be extracted into packages themselves so they can be shared easily.

Each section details the minimum standards, based on the criticality of the project. The
standards are cumulative, so medium criticality must meet both medium and low standards.

## Low Criticality

::::: {.grid}

:::: {.g-col-6}

::: {.callout-note}
### [Coding Style](coding_style.qmd)
Styling your code in a consistent way makes it easier to read. Imagine reading a book
without punctuation, sentences, paragraphs, or even spaces between words. It would be
possible, but it will be much harder than a nicely formatted book. Having agreed
conventions for file, variable and function names, will make it easier to locate and use
code. In addition, having spaces around operators and splitting up long lines make it easier to read.
:::

::::

:::: {.g-col-6}

::: {.callout-note}
### [Recommended Packages](recommended_packages.qmd)
Specifying recommended packages ensures the same approach is taken across projects. For
example, we recommend using Polars for data manipuations, but there are other approaches,
for exampe, Pandas. If all the team use the same packages, then it is much easier for
members to work across projects.
:::

::::

:::::

## Medium Criticality

::::: {.grid}

:::: {.g-col-6}

::: {.callout-warning}
### [Factoring](factoring.qmd)
As code gets more complicated a large script becomes harder to understand and maintain.
Variables defined at the top of the scripts may be used much later so when making changes
it becomes difficult to understand the consequences. In this case it is time to split the
code up into smaller pieces, also known as factoring. By defining a smaller functions or
classes with methods, it isolates that code from the rest of the script. In addition, you
may find similar code being used in multiple places. In that case, it is a good idea to
create a single function and call it multiple times.
:::

::::

:::: {.g-col-6}

::: {.callout-warning}
### [Patterns](patterns.qmd)
When you work on many projects, you start to see repeated patterns emerging. This
generally starts as similar snippets of code or copying code from one project to another.
For example, to read common data from a shared database generally requires a few steps and
may be some validation. It is worth specifying the approach all projects should take. Even
better, the approach can be captured in a function or functions and added to an internal
package. A package is the best way to share code across multiple projects.
:::

::::

:::::

## High Criticality

::: {.callout-important}
### [Project Structure](project_structure.qmd)
For critical processes it is important the code is structured in an organised and
consistent manner. For example, Python code should be broken up into functions or classes
with methods and stored in a folder of modules. Each file should have a test script,
testing the functions and methods it contains in the tests folder.

Relatively simple scripts can then be used to run the process by loading the files and
calling the functions. [Quarto](https://quarto.org) is ideal for these run scripts, as you
can combine the user guide with the code.

In Python, the project structure depends on whether you are building an application or
package. The project manager app [uv](https://docs.astral.sh/uv/) simplifies the process
of creating a project structure.
:::
