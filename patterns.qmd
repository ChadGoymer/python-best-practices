---
title: "Patterns"
---

As you create more Python projects you will start to see repeated patterns emerging. When
this occurs, it is a good idea to specify the approach all projects should take. Managing
projects in this way ensures consistency across projects, and makes it easier for team
members to work across projects.

One way to ensure patterns are followed is to capture the approach in a package. A package
is the best way to share code across multiple projects. For example, if you have a common
way to read data from a shared database, you could create a function or functions and add
them to an internal package. This way, the approach is documented and can be easily shared
across projects.

Another way to ensure patterns are followed is to create a template project. A template
project is a project that contains the structure and code that all projects should follow.
When a new project is started, the template project is copied and modified to suit the new
project. This ensures that all projects follow the same structure and code patterns.

Examples of existing patterns we use include:

1. [lloydsdb](lloydsdb.qmd): lloydsdb is a package that provides a common way to read and
   write data from a Lloyd's database.
1. [lloydsbrand](lloydsbrand.qmd): lloydsbrand is a package that provides styling and
   formatting option for applications and reports, so they follow Lloyd's brand
   guidelines.
1. [Tapyr](https://appsilon.github.io/tapyr-docs/): Tapyr provides a template for Shiny
   applications.